name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  POETRY_VERSION: "1.7.1"

jobs:
  # This job will always run and combine results from other jobs
  pr-validation:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    if: always()
    
    steps:
    - name: Check code quality results
      if: needs.code-quality.result != 'success'
      run: |
        echo "❌ Code quality checks failed"
        exit 1
    
    - name: Check unit test results
      if: needs.unit-tests.result != 'success'
      run: |
        echo "❌ Unit tests failed"
        exit 1
    
    - name: All checks passed
      run: |
        echo "✅ All required checks passed!"

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test,lint,typing,codespell
    
    - name: Check code formatting
      run: |
        echo "::group::Checking code formatting"
        poetry run ruff format . --check
        echo "::endgroup::"
    
    - name: Check import sorting
      run: |
        echo "::group::Checking import sorting"
        poetry run ruff check --select I .
        echo "::endgroup::"
    
    - name: Run ruff linting
      run: |
        echo "::group::Running ruff linting"
        poetry run ruff check .
        echo "::endgroup::"
    
    - name: Run mypy type checking
      run: |
        echo "::group::Running mypy type checking"
        mkdir -p .mypy_cache
        poetry run mypy . --cache-dir .mypy_cache
        echo "::endgroup::"
    
    - name: Check spelling
      run: |
        echo "::group::Checking spelling"
        poetry run codespell --toml pyproject.toml
        echo "::endgroup::"

  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
    
    - name: Run unit tests
      run: |
        echo "::group::Running unit tests on Python 3.11"
        poetry run pytest tests/unit_tests/ \
          --verbose \
          --cov=langchain_salesforce \
          --cov-report=term-missing \
          --cov-report=xml \
          --junit-xml=junit-3.11.xml
        echo "::endgroup::"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-3.11
        path: junit-3.11.xml
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml 